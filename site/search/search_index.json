{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#quantitative-phagebacteria-dynamics-across-scales","title":"Quantitative Phage\u2013Bacteria Dynamics Across Scales","text":"<p>\ud83d\udccd June 23\u201327, 2025 \ud83d\udccd University of Maryland, College Park</p>"},{"location":"#scientific-committee-chair","title":"\ud83e\udde0 Scientific Committee Chair","text":"<ul> <li>Prof. Joshua Weitz (UMD)</li> <li>Dr. Marian Dominguez-Mirazo (UMD)</li> </ul>"},{"location":"#webpage-and-solutions-by","title":"\ud83e\uddea Webpage and Solutions by:","text":"<ul> <li>Raunak Dey (UMD)</li> <li>David Demory (Oceanography Observatory of Banyuls-sur-Mer)</li> </ul> <p>Phage transform the fate of cells, populations, and ecosystems. Building on the interdisciplinary QLife workshops in Paris (2022 &amp; 2024), this summer school brings together researchers integrating models, experiments, and field data to explore the rich dynamics of phage\u2013bacteria interactions across biological scales.</p>"},{"location":"#objectives","title":"\ud83c\udfaf Objectives","text":"<p>Participants will: - Learn fundamental and cutting-edge methods in phage\u2013bacteria modeling - Explore mechanisms in spatial dynamics, phage therapy, evolution, and ecosystem functioning - Work with real data through computational labs and problem-solving exercises - Bridge models with empirical data using Python or R</p>"},{"location":"#daily-schedule-highlights","title":"\ud83d\udcc5 Daily Schedule Highlights","text":"<ul> <li>\u2600\ufe0f Morning \u2014 Lectures by leading experts</li> <li>\ud83d\udda5\ufe0f Afternoon \u2014 Hands-on computational labs</li> <li>\ud83c\udf19 Evening \u2014 Plenary talks or poster sessions</li> </ul>"},{"location":"#lecturers-speakers","title":"\ud83d\udc69\u200d\ud83c\udfeb Lecturers &amp; Speakers","text":"<ul> <li>Stephen Beckett (UMD)  </li> <li>Alita Burmeister (UW-Milwaukee)  </li> <li>Waqas Chaudhry (Tolka AI)  </li> <li>Tapan Goel (UMD)  </li> <li>Ido Golding (UIUC)  </li> <li>Jacopo Marchi (UMD)  </li> <li>Justin Meyer (UC San Diego)  </li> <li>Namiko Mitarai (Niels Bohr Institute)  </li> <li>Daniel Muratore (Santa Fe Institute)  </li> <li>Carey Nadell (Dartmouth College)  </li> <li>Sarah Preheim (JHU)  </li> <li>Paul Turner (Yale University)  </li> <li>Joshua Weitz (UMD)  </li> </ul>"},{"location":"#eligibility","title":"\u2705 Eligibility","text":"<ul> <li>Open to MS, PhD, and postdoc-level scientists</li> <li>Background in life sciences, physics, engineering, computer science, or mathematics</li> <li>Familiarity with Unix/Linux and proficiency in Python or R required  </li> <li>No registration fee for accepted participants</li> </ul>"},{"location":"#travel-application","title":"\ud83e\uddf3 Travel &amp; Application","text":"<ul> <li>Travel awards available  </li> <li>Applications must include:</li> <li>CV</li> <li>Motivation letter</li> <li>Letter of support</li> </ul> <p>\ud83d\udd17 Apply here \ud83d\udd52 Deadline: March 21, 2025</p>"},{"location":"#hosted-by","title":"\ud83e\uddec Hosted By:","text":"<ul> <li>BRIN Mathematics Research Center  </li> <li>College of Computer, Mathematical, and Natural Sciences  </li> <li>Institute for Health Computing</li> </ul> <p>\u201cIntegrating computational methods and models into phage-bacteria research practice, across scales.\u201d</p>"},{"location":"day1_eco_evo_principles/matlab_solutions/","title":"Matlab - Exercises","text":""},{"location":"day1_eco_evo_principles/matlab_solutions/#sv-lytic-model","title":"SV lytic model","text":""},{"location":"day1_eco_evo_principles/matlab_solutions/#simulate-a-viral-invasion-","title":"Simulate a viral invasion -","text":"<p>Consider the SV model for lytic infections with susceptible cells (S) and free viruses (V) given by, \\begin{align} \\dot{S} &amp;= bS (1- S/K) - \\phi SV - dS  \\end{align} \\begin{align} \\dot{V} &amp;= \\beta\\phi SV - \\phi SV - mV \\end{align}</p> <p>use the following set of parameter values:</p> <p>$$ \\phi = 6.7 \\times 10^{-10} \\ \\mathrm{mL} \\ \\mathrm{h}^{-1} $$  $$  m = 1/24 h^{\u22121} $$   $$ d = 1/4 h^{\u22121}$$  $$ b = 0.95 h^{\u22121}$$ $$ K = 7.5\\times 10^7 \\text{cell mL}^{\u22121}$$  $$ \\beta = 50$$ virus/cell </p>"},{"location":"day1_eco_evo_principles/matlab_solutions/#sv-simulation","title":"SV simulation","text":"<p>Starting with the SV model, initiate an \u2018inoculation\u2019, adding $S0 = 10^4 $cell/mL of microbe, and then letting the population reach its equilibrium after approximately 24 h.</p> <p>Question: What population density does it reach? Is it what you expect? Compare your numerical simulation of S at the end of the simulation with the value of the equilibrium that you found analytically. Numerically, create a function describing the SV model and integrate it using python.</p> <p>Solution: This is the SV ODE</p> <pre><code>function dydt = SV_ode(t, y, pars)\n    % Standard SV model ODEs\n    S = y(1);\n    V = y(2);\n    phi = pars.phi;\n    m = pars.m;\n    d = pars.d;\n    b = pars.b;\n    K = pars.K;\n    beta = pars.beta;\n\n    dS = b*S*(1 - S/K) - phi*S*V - d*S;\n    dV = beta*phi*S*V - phi*S*V - m*V;\n\n    dydt = [dS; dV];\nend\n</code></pre> <p>simulate it with</p> <pre><code>% Time settings\nt0 = 0;      % Initial time (hours)\ntf = 24;     % Final time (hours)\nT = linspace(t0, tf, 250);  % Time vector\n\n% Initial conditions\ny0 = [1e4; 0];  % [S0; V0] (V0 is 0 by default)\n\n% Parameters\npars.phi = 6.7e-10;\npars.m = 1/24;\npars.d = 1/4;\npars.b = 0.95;\npars.K = 7.5e7;\npars.beta = 50;\n\n% Solve ODE\n[T_out, Y] = ode45(@(t,y) SV_ode(t, y, pars), T, y0);\n\n% Extract S and compute equilibrium value\nS = Y(:,1);\nSeq_num = S(end);\n\n% Plotting\nfigure;\nplot(T_out, S, 'k', 'LineWidth', 2); hold on;\nscatter(T_out(end), Seq_num, 80, 'red', 'filled');\nlegend('S(t)', 'S^* numerically', 'Location', 'best', 'Box', 'on');\nxlabel('Time (h)');\nylabel('S cells/mL');\ntitle('SV numerical integration');\nset(gca,'FontSize',20);\ngrid on;\n\n% Save figure\nsaveas(gcf, 'SV_model_plot.png');\n</code></pre> <p>to get the saved figure </p> <p>Analytically, we find that in the absence of virus in the system \\((V0 = 0), \\dot{V} = 0\\) and the system remains disease-free. The SV system reduces to the logistic model with cell death,  \\(\\dot{S} = bS(1- S/K) - dS\\) Solving \\(\\dot{S} = 0\\) we find that S approaches the equilibrium point \\(S^\u2217 = K(1-d/b)\\)</p> <pre><code>% Plotting\nfigure;\nplot(T_out, S, 'k', 'LineWidth', 2); hold on;\nscatter(T_out(end), Seq_num, 80, 'red', 'filled');\nplot(T_out, Seq_ana * ones(size(T_out)), 'g--', 'LineWidth', 2);\nlegend('S(t)', 'S^* numerically', 'S^* analytically', 'Location', 'best', 'Box', 'on');\nxlabel('Time (h)');\nylabel('S cells/mL');\ntitle('SV numerical integration with equilibrium');\nset(gca,'FontSize',20);\ngrid on;\n\n% Save figure\nsaveas(gcf, 'SV_model_equilibrium_plot.png');\n</code></pre> <p>to get the saved figure </p>"},{"location":"day1_eco_evo_principles/matlab_solutions/#finding-out-basic-reproduction-number","title":"Finding out basic reproduction number","text":"<p>Beginning from the disease-free equilibrium, add \\(V_0\\) = 100 virus/mL and using \u03b2 = 50 virus/cell for the burst size, estimate the basic reproduction number \\(R_0\\).</p> <p>Question: What is the value of \\(R_0\\) and what can you tell about the viral invasion? Simulate the dynamical system, do the viruses increase in abundance?</p> <p>Answer: The reproduction number is the number of newly infected induced by one infected in a fully susceptible population. It is a threshold value, that indicates if the virus is going to invade or being washed-out. When \\(R_0 &gt; 1\\) the virus has a positive growth rate and invade the population, when \\(R_0 &lt;= 1\\) the virus has negative or null population growth rate and is not able to invade. We want to find a condition for invasion, you can solve \\(\\dot{V} &gt; 0 (\\text{ at } S\u2217)\\) (disease free equilibrium) for a initial inoculation of virus V0:</p> \\[\\begin{align}  \\dot{V} &amp;= \\beta\\phi S^* V_0 - \\phi S^* V_0 -mV_0 \\end{align}\\] \\[\\begin{align}   \\beta\\phi S^* &gt; \\phi S^* +m \\end{align}\\] <p>The basic reproduction number of the system is \\(R_0 &gt; \\frac{\\beta\\phi S^* }{\\beta\\phi S^* +m}\\) </p> <pre><code>% Analytical equilibrium\nSeq_ana = pars.K * (1 - pars.d / pars.b);\n\n% Compute R0\nR0 = (pars.beta * pars.phi * Seq_ana) / (pars.phi * Seq_ana + pars.m);\nfprintf('R0 = %.4f\\n', R0);\n</code></pre> <p>R0 = 23.5258</p> <pre><code>% Updated initial conditions (start from DFE + virus)\ny0 = [Seq_ana; 100];\n\n% Solve ODE\n[T_out, Y] = ode45(@(t,y) SV_ode(t, y, pars), T, y0);\n\n% Extract solutions\nS = Y(:,1);\nV = Y(:,2);\n\n% Plot semilog\nfigure;\nsemilogy(T_out, S, 'k', 'LineWidth', 2); hold on;\nsemilogy(T_out, V, 'r', 'LineWidth', 2);\nscatter(0, Seq_ana, 80, 'red', 'filled', 'DisplayName', 'DFE');\nlegend('S(t)', 'V(t)', 'DFE', 'Location', 'best', 'Box', 'on');\nxlabel('Time (h)');\nylabel('Density (cells or viruses/mL)');\ntitle('SV numerical integration from DFE');\ngrid on;\n\n% Save figure\nsaveas(gcf, 'SV_model_DFE_plot.png');\n</code></pre> <p>saved figure </p>"},{"location":"day1_eco_evo_principles/matlab_solutions/#estimating-growth-rate-of-virus-population","title":"Estimating growth rate of virus population","text":"<p>Estimate the growth rate of the virus population. Question: Does it agree with your theoretical expectations? Answer: Evaluate $$ \\dot{V}|_{S= S^\u2217}$$. </p> \\[\\begin{align} 1/V dV/dt = \\beta\\phi S^* - \\phi S^* -m  \\end{align}\\] \\[\\begin{align}  r = \\beta\\phi S^* - \\phi S^* -m \\end{align}\\] <p>$ S^{* } $ by is expression and re-arranging: $ r = (\\beta-1)\\phi K (1-d/b) -m  $</p> <p>Numerically estimate the slope of log(V ) over time during the exponential growth phase and compare with the above equation for r with parameter values substituted.</p> <pre><code>% Take log of virus counts\nlogV = log(V);\n\n% Select exponential growth phase (e.g., T(2:15))\nidx = 2:15;  % MATLAB is 1-indexed\nx_reg = T_out(idx)';\ny_reg = logV(idx);\n\n% Fit linear regression model\ncoeffs = polyfit(x_reg, y_reg, 1);\nr_num = coeffs(1);  % Slope of the line (exponential rate)\ny_fit = polyval(coeffs, x_reg);\n\n% Calculate R^2\nSS_res = sum((y_reg - y_fit).^2);\nSS_tot = sum((y_reg - mean(y_reg)).^2);\nr_sq = 1 - SS_res / SS_tot;\n\n% Display numerical results\nfprintf('Numerical estimate:\\n');\nfprintf('r_num = %.5f\\n', r_num);\nfprintf('R^2 = %.4f\\n', r_sq);\n\n% Plot log(V)\nfigure;\nscatter(T_out, logV, 'filled'); hold on;\nscatter(x_reg, y_reg, 60, 'r', 'filled');\nplot(x_reg, y_fit, 'b-', 'LineWidth', 2);\nxlabel('Time (h)');\nylabel('log(V)');\ntitle('Log(V) and exponential phase linear fit');\nlegend('log(V)', 'Exponential phase', 'Linear fit', 'Location', 'best');\ngrid on;\nset(gca,'FontSize',24);\nsaveas(gcf, 'growth_estimate.png');\n</code></pre> <p>saved figure </p> <p>Finally, plot the dynamics in the phase plane and evaluate whether the system converges to a new coexistence equilibrium - in doing so compare the equilibrium to theory, noting how the bacterial density changes and to what extent the dynamics exhibit cycles or not.</p>"},{"location":"day1_eco_evo_principles/matlab_solutions/#phase-space-plots","title":"Phase space plots","text":"<p>Question: Finally, plot the dynamics in the phase plane and evaluate whether the system converges to a new coexistence equilibrium - in doing so compare the equilibrium to theory, noting how the bacterial density changes and to what extent the dynamics exhibit cycles or not.</p> <p>Answer: Range over the phi to see how the solution trajectories change in the phase. For sufficient small \u03d5, no invasion will occur. For large enough \u03d5, invasion occurs, and you can find closed cycles by running out long enough. For intermediate values of \u03d5, invasion occurs but population now tend towards and an equilibrium point.</p> <p>The endemic equilibrium is  $$ S^* = m/(\\beta -1)\\phi $$</p> \\[ V^* = \\frac{1}{\\phi} (d-b-\\frac{bm}{(\\beta -1)\\phi K})  \\] <pre><code>% Time parameters\nt0 = 0;\ntf = 5000;\ndt = 0.1;\nT = t0:dt:tf;\n\n% Shared parameters\npars.m = 1/24;\npars.d = 1/4;\npars.b = 0.95;\npars.K = 7.5e7;\npars.beta = 50;\n\n% Different phi values\nphi_values = [1e-12, 1e-9, 1e-5];\ntitles = {'Low \\phi', 'Medium \\phi', 'High \\phi'};\n\nfigure;\n\nfor i = 1:3\nphi = phi_values(i);\npars.phi = phi;\n\n% Initial condition &amp; equilibrium calculations\nif phi == 1e-12\n    y0 = [1000; 100];\n    Seq_ana = pars.K * (1 - pars.d / pars.b);\n    dy = ode45(@(t, y) SV_ode(t, y, pars), T, y0);\n    Y = deval(dy, T);\n    S = Y(1, :);\n    V = Y(2, :);\nelse\n    Seq = pars.m / ((pars.beta - 1) * pars.phi);\n    Veq = (1 / pars.phi) * (pars.b * (1 - Seq / pars.K) - pars.d);\n    if phi == 1e-5\n        y0 = [Seq + 250; Veq + 500];\n    else\n        y0 = [1000; 100];\n    end\n    dy = ode45(@(t, y) SV_ode(t, y, pars), T, y0);\n    Y = deval(dy, T);\n    S = Y(1, :);\n    V = Y(2, :);\nend\n\n% Plot in subplot\nsubplot(1, 3, i)\nloglog(S, V, 'LineWidth', 2); hold on;\nscatter(y0(1), y0(2), 60, 'r', 'filled', 'DisplayName', 'Initial condition');\nscatter(S(end), V(end), 60, 'g', 'filled', 'DisplayName', 'Final condition');\n\nif phi == 1e-12\n    scatter(Seq_ana, 1e-20, 60, 'b', 'filled', 'DisplayName', 'DFE');\n    xline(Seq_ana, 'k--', 'DisplayName', 'S* (DFE)');\nelse\n    scatter(Seq, Veq, 60, 'k', 'filled', 'DisplayName', 'Endemic Eq.');\n    xline(Seq, 'k--', 'DisplayName', 'S*');\n    yline(Veq, 'k--', 'DisplayName', 'V*');\nend\n\nxlabel('Microbe S');\nylabel('Virus V');\ntitle(titles{i});\nlegend('Location', 'best');\ngrid on;\nend\n\nsgtitle('Phase Plane (log-log) for Different \\phi Values');\nend\n</code></pre> <p>saved figure </p>"},{"location":"day1_eco_evo_principles/matlab_solutions/#siv-model","title":"SIV model","text":"<p>Consider the SIV model with susceptible S cells, infected I cells and free virus particles V ,</p> \\[\\begin{align} \\dot{S} &amp;= bS (1- \\frac{S+I}{K}) - \\phi SV - dS\\\\ \\dot{I} &amp;= \\phi SV - \\eta I - dI\\\\ \\dot{V} &amp;= \\beta\\phi SV - \\phi SV - mV \\end{align}\\] <p>Use the following set of parameter values:</p> \\[ \\phi = 6.7 \\times 10^{-10} \\ \\mathrm{mL} \\ \\mathrm{h}^{-1} \\] <p>$$  m = 1/24 h^{\u22121} $$</p> <p>$$ d = 1/4 h^{\u22121}$$</p> <p>$$ b = 0.95 h^{\u22121}$$</p> <p>$$ \\eta = 1 h^{\u22121}$$</p> \\[ K = 5\\times 10^7 \\text{cell mL}^{\u22121}\\]"},{"location":"day1_eco_evo_principles/matlab_solutions/#basic-reproduction-number","title":"Basic reproduction number","text":"<p>Beginning from the disease-free equilibrium, add V0 = 100 virus/mL with a burst \u03b2 = 50 virus/cell and a lysis rate \u03b7 = 0.5 hours. Estimate the basic reproduction number R0.</p> <p>Question: Is R0 &gt; 1? Simulate the dynamical system and conclude on the invasion of the virus.</p> <p>Answer For zero initial viral density.  $$ \\dot{S} = 0$$</p> \\[ S^* = K(1-\\frac{d}{b}) \\] <p>R0 = viral production * probability to infect before virus die * probability to lyse before cells die. S0, $$ R_0 = \\beta  \\frac{mS^ }{mS^ +m } \\frac{\\eta}{\\eta+d}$$</p> <pre><code>#Estimate the R0\n# parameters\npars={}\npars[\"phi\"] = 6.7E-10\npars[\"m\"] = 1/24\npars[\"d\"] = 1/4\npars[\"b\"] = 0.95\npars[\"K\"] = 5E6\npars[\"beta\"] = 50\npars[\"eta\"] = 0.5\n# DFE\nS_DFE = pars[\"K\"]*(1-pars[\"d\"]/pars[\"b\"])\nprod = pars[\"beta\"]\nproba_lyse = pars[\"phi\"]*S_DFE/(pars[\"phi\"]*S_DFE+pars[\"m\"])\nproba_inf = pars[\"eta\"]/(pars[\"eta\"]+pars[\"d\"])\n\n\nR0 = prod*proba_lyse*proba_inf\nprint(R0)\n</code></pre> <p>R0 = 1.8643</p> <pre><code>% Time\nt0 = 0;\ntf = 2000;\nT = linspace(t0, tf, 500);  % same as Python's linspace\n\n% Parameters\npars.phi = 6.7e-10;\npars.m = 1/24;\npars.d = 1/4;\npars.b = 0.95;\npars.K = 5e6;\npars.beta = 50;\npars.eta = 0.5;\n\n% Disease-Free Equilibrium\nS_DFE = pars.K * (1 - pars.d / pars.b);\n\n% Initial Conditions [S, I, V]\ny0 = [S_DFE; 0; 100];\n\n% Solve the system\n[T_out, Y] = ode45(@(t, y) SIV_ode(t, y, pars), T, y0);\nS = Y(:, 1);\nI = Y(:, 2);\nV = Y(:, 3);\n\n% Plotting\nfigure;\nsemilogy(T_out, S + I, 'k', 'LineWidth', 2); hold on;\nsemilogy(T_out, S, 'g', 'LineWidth', 2);\nsemilogy(T_out, V, 'r', 'LineWidth', 2);\nscatter(0, S_DFE, 80, 'filled', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'red');\n\nlegend('S + I', 'S', 'V', 'DFE', 'Location', 'best', 'Box', 'on');\nxlabel('Time (h)');\nylabel('Density (cells or viruses/mL)');\ntitle('SIV model dynamics from DFE');\ngrid on;\n</code></pre> <p>saved figure </p>"},{"location":"day1_eco_evo_principles/matlab_solutions/#modulating-the-viral-burst-size","title":"Modulating the viral burst size","text":"<p>Question: Do the viruses always invade? Why or why not? If there is a critical point in the dynamics? Does it agree with your theoretical expectations?</p> <p>Answer: No, when the burst size is too low, then R0 &lt; 1 and the invasion is not possible. Calculate the critical burst size using the equation of R0 &gt; 1.</p> <pre><code>% Time\nt0 = 0;\ntf = 2000;\nT = linspace(t0, tf, 500);\n\n% Parameters (same as before, but beta changed)\npars.phi = 6.7e-10;\npars.m = 1/24;\npars.d = 1/4;\npars.b = 0.95;\npars.K = 5e6;\npars.beta = 10; % changed here\npars.eta = 0.5;\n\n% Disease-Free Equilibrium\nS_DFE = pars.K * (1 - pars.d / pars.b);\n\n% Initial Conditions [S, I, V]\ny0 = [S_DFE; 0; 100];\n\n% Integrate system\n[T_out, Y] = ode45(@(t, y) SIV_ode(t, y, pars), T, y0);\nS = Y(:, 1);\nI = Y(:, 2);\nV = Y(:, 3);\n\n% Plotting\nfigure;\nsemilogy(T_out, S + I, 'k', 'LineWidth', 2); hold on;\nsemilogy(T_out, S, 'g', 'LineWidth', 2);\nsemilogy(T_out, V, 'r', 'LineWidth', 2);\nscatter(0, S_DFE, 80, 'filled', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'red');\n\nlegend('S + I', 'S', 'V', 'DFE', 'Location', 'best', 'Box', 'on');\nxlabel('Time (h)');\nylabel('Density (cells or viruses/mL)');\ntitle('SIV Model Dynamics (\\beta = 10)');\nset(gca,'FontSize',24);\ngrid on;\nsaveas(gcf, 'siv_beta_10.png');\n</code></pre> <p>saved figure </p> <p>So the invasion criterion, i.e., where the basic reproduction number R0 is greater than 0 is $$ \\beta_{critical} &gt; \\frac{(\\eta+d)(\\phi S^ +m)}{\\eta\\phi S^ } $$</p> <pre><code>% Parameters\npars.phi = 6.7e-10;\npars.m = 1/24;\npars.d = 1/4;\npars.b = 0.95;\npars.K = 5e6;\npars.eta = 0.5;\n\n% Disease-Free Equilibrium\nS_DFE = pars.K * (1 - pars.d / pars.b);\n\n% Critical burst size beta_crit = numerator / denominator\nnum = (pars.eta + pars.d) * (pars.phi * S_DFE + pars.m);\nden = pars.eta * pars.phi * S_DFE;\nbeta_crit = num / den;\n\n% Sweep over burst sizes\nBrange = linspace(1, 100, 20);\nR0_vals = zeros(size(Brange));\n\nfigure; hold on;\n\n% Loop over burst sizes\nfor i = 1:length(Brange)\n    beta = Brange(i);\n    pars.beta = beta;\n\n    % Components of R0\n    prod = beta;\n    proba_lyse = (pars.phi * S_DFE) / (pars.phi * S_DFE + pars.m);\n    proba_inf = pars.eta / (pars.eta + pars.d);\n    R0 = prod * proba_lyse * proba_inf;\n\n    % Store and plot\n    R0_vals(i) = R0;\n    c = [0.75, 0.75, 0.75] * i / length(Brange);\n    scatter(beta, R0, 50, 'filled', 'MarkerFaceColor', c);\nend\n\n% Highlight beta_crit\nscatter(beta_crit, 1, 100, 'r', 'filled', 'DisplayName', '\\beta_{crit}');\nyline(1, 'k--', 'DisplayName', 'R_0 = 1');\n\nxlabel('Burst Size (\\beta)');\nylabel('R_0');\ntitle('Invasion Threshold for Varying Burst Size');\nxlim([0, 105]);\nylim([0, max(R0_vals) + 0.5]);\nlegend('Location', 'southeast');\ngrid on;\nsaveas(gcf, 'siv_beta_variation.png');\n</code></pre> <p>saved figure </p>"},{"location":"day1_eco_evo_principles/matlab_solutions/#decrease-of-lysis-rate","title":"Decrease of lysis rate","text":"<p>Returning to burst size of 50, consider what happens if the viral lysis rate \u03b7 decreases from 1 to 0.1 h. Question: Do the viruses always invade? Why or why not? If there is a critical point in the dynamics? Does it agree with your theoretical expectations? Answer: Similarly than the burst size, when the lysis rate is too low, then R0 &lt; 1 and the invasion is not possible.</p> <pre><code>% Time setup\nt0 = 0;\ntf = 2000;\nT = linspace(t0, tf, 500);\n\n% Parameters\npars.phi = 6.7e-10;\npars.m = 1/24;\npars.d = 1/4;\npars.b = 0.95;\npars.K = 5e6;\npars.beta = 50;\npars.eta = 0.1; % Updated eta\n\n% Disease-Free Equilibrium\nS_DFE = pars.K * (1 - pars.d / pars.b);\n\n% Initial Conditions: [S, I, V]\ny0 = [S_DFE; 0; 100];\n\n% Integrate the ODE\n[T_out, Y] = ode45(@(t, y) SIV_ode(t, y, pars), T, y0);\nS = Y(:,1);\nI = Y(:,2);\nV = Y(:,3);\n\n% Plotting\nfigure;\nsemilogy(T_out, S + I, 'k', 'LineWidth', 2); hold on;\nsemilogy(T_out, S, 'g', 'LineWidth', 2);\nsemilogy(T_out, V, 'r', 'LineWidth', 2);\nscatter(0, S_DFE, 80, 'filled', 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'red');\n\nlegend('S + I', 'S', 'V', 'DFE', 'Location', 'best', 'Box', 'on');\nxlabel('Time (h)');\nylabel('Density (cells or viruses/mL)');\ntitle('SIV Model Dynamics (\\eta = 0.1 h^{-1})');\ngrid on;\nsaveas(gcf, 'siv_eta_0pt1.png');\n</code></pre> <p>Estimate the threshold value of \u03b7 by considering, basic reproduction number greater than 1 as, $ \\eta_{crit} = \\frac{d(\\phi S^ +m)}{\\beta\\phi S^ -\\phi S^* -m} $</p> <pre><code>% Parameters\npars.phi = 6.7e-10;\npars.m = 1/24;\npars.d = 1/4;\npars.b = 0.95;\npars.K = 5e6;\npars.beta = 50;\n\n% Disease-Free Equilibrium\nS_DFE = pars.K * (1 - pars.d / pars.b);\n\n% Numerator and Denominator\nnum = pars.d * (pars.phi * S_DFE + pars.m);\nden = pars.beta * pars.phi * S_DFE - pars.phi * S_DFE - pars.m;\n\n% Critical lysis rate\neta_crit = num / den;\n\n% Display\nfprintf('Critical lysis rate (eta_crit) = %.4f h^{-1}\\n', eta_crit);\n</code></pre> <p>Critical lysis rate (eta_crit) = 0.1392 h^{-1}</p> <p>saved figure </p>"},{"location":"day1_eco_evo_principles/matlab_solutions/#phase-space-dynamics","title":"Phase space dynamics","text":"<p>Finally, plot the dynamics in the S-V phase plane and evaluate whether the system converges to a new coexistence equilibrium - in doing so, compare the equilibrium to theory, noting how the bacterial density changes, and to what extent the dynamics exhibit cycles or not.</p> <pre><code>% Time setup\nt0 = 0;\ntf = 5000;\ndt = 0.1;\nT = t0:dt:tf;\n\n% Fixed parameters\npars.m = 1/24;\npars.d = 1/4;\npars.b = 0.95;\npars.K = 5e6;\npars.beta = 50;\npars.eta = 0.5;\n\n% DFE for plotting reference\nS_DFE = pars.K * (1 - pars.d / pars.b);\n\n% List of phi values and corresponding initial conditions\nphi_list = [1e-12, 1e-9, 5e-9, 1e-8];\ny0_list = {[1000; 0; 100], [1000; 0; 100], [100; 0; 1e6], [100; 0; 1e6]};\ntitles = {'Low \\phi', 'Medium \\phi', 'Medium \\phi (high V_0)', 'High \\phi'};\n\n% Create subplot figure\nfigure;\nfor i = 1:4\n    pars.phi = phi_list(i);\n    y0 = y0_list{i};\n\n    % Integrate SIV model\n    [~, Y] = ode45(@(t, y) SIV_ode(t, y, pars), T, y0);\n    S = Y(:, 1);\n    V = Y(:, 3);\n\n    % Plot in subplot\n    subplot(2, 2, i);\n    loglog(S, V, 'LineWidth', 2); hold on;\n    scatter(y0(1), y0(3), 50, 'red', 'filled', 'DisplayName', 'Initial');\n    scatter(S(end), V(end), 50, 'green', 'filled', 'DisplayName', 'Final');\n    if i == 1\n        scatter(S_DFE, 1e-20, 50, 'blue', 'filled', 'DisplayName', 'DFE');\n    end\n    xlabel('Microbe S');\n    ylabel('Virus V');\n    title(titles{i});\n    legend('Location', 'best');\n    grid on;\nend\n\nsgtitle('SIV Model: Phase Plane for Different \\phi');\nsaveas(gcf, 'siv_phi_variation.png');\n</code></pre> <p>saved figure </p>"},{"location":"day1_eco_evo_principles/python_exercises_day1/","title":"Python - Exercises","text":"In\u00a0[1]: Copied! <pre># SV model function\ndef SV_ode(y,t,pars):\n    \"\"\"\n    returns the rate of change of host and virus in the standard SV model\n    \"\"\"\n    # initialization\n    dydt=np.zeros(2)\n    S = y[0]\n    V = y[1]\n    # Parameters\n    phi = pars[\"phi\"]\n    m = pars[\"m\"]\n    d = pars[\"d\"]\n    b = pars[\"b\"]\n    K = pars[\"K\"]\n    beta = pars[\"beta\"]\n    # system of ODEs\n    dydt[0] = b*S*(1-S/K) - phi*S*V - d*S\n    dydt[1] = beta*phi*S*V - phi*S*V - m*V\n    return dydt\n</pre> # SV model function def SV_ode(y,t,pars):     \"\"\"     returns the rate of change of host and virus in the standard SV model     \"\"\"     # initialization     dydt=np.zeros(2)     S = y[0]     V = y[1]     # Parameters     phi = pars[\"phi\"]     m = pars[\"m\"]     d = pars[\"d\"]     b = pars[\"b\"]     K = pars[\"K\"]     beta = pars[\"beta\"]     # system of ODEs     dydt[0] = b*S*(1-S/K) - phi*S*V - d*S     dydt[1] = beta*phi*S*V - phi*S*V - m*V     return dydt In\u00a0[2]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import integrate\n\n# Numerical time\nt0 = 0 # Initial time\ntf = 24 # Final time\nT = np.linspace(t0,tf) # time steps to report\n# Initial population size\ny0 = np.zeros(2)\ny0[0] = 1E4;\n# parameters\npars={}\npars[\"phi\"] = 6.7E-10\npars[\"m\"] = 1/24\npars[\"d\"] = 1/4\npars[\"b\"] = 0.95\npars[\"K\"] = 7.5E7\npars[\"beta\"] = 50\n\ndy = integrate.odeint(SV_ode,y0,T,args=(pars,))\nS = dy[:,0]\n\n# Find the equilibrium value numerically:\n\nSeq_num = S[-1]\n# plot\nplt.plot(T,S,'k', label=\"$S(t)$\")\nplt.scatter(T[-1],Seq_num,color='red', label=\"$S^* numerically$\")\nplt.legend(edgecolor='k')\nplt.xlabel('Time ($h$)')\nplt.ylabel('S cell/mL')\nplt.title(\"SV numerical integration\")\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy import integrate  # Numerical time t0 = 0 # Initial time tf = 24 # Final time T = np.linspace(t0,tf) # time steps to report # Initial population size y0 = np.zeros(2) y0[0] = 1E4; # parameters pars={} pars[\"phi\"] = 6.7E-10 pars[\"m\"] = 1/24 pars[\"d\"] = 1/4 pars[\"b\"] = 0.95 pars[\"K\"] = 7.5E7 pars[\"beta\"] = 50  dy = integrate.odeint(SV_ode,y0,T,args=(pars,)) S = dy[:,0]  # Find the equilibrium value numerically:  Seq_num = S[-1] # plot plt.plot(T,S,'k', label=\"$S(t)$\") plt.scatter(T[-1],Seq_num,color='red', label=\"$S^* numerically$\") plt.legend(edgecolor='k') plt.xlabel('Time ($h$)') plt.ylabel('S cell/mL') plt.title(\"SV numerical integration\") Out[2]: <pre>Text(0.5, 1.0, 'SV numerical integration')</pre> <p>Analytically, we find that in the absence of virus in the system $$(V0 = 0), \\dot{V} = 0$$ and the system remains disease-free. The SV system reduces to the logistic model with cell death, $$\\dot{S} = bS(1- S/K) - dS$$ Solving $$\\dot{S} = 0$$ we find that S approaches the equilibrium point $$S^\u2217 = K(1-d/b)$$</p> In\u00a0[5]: Copied! <pre>Seq_ana = pars[\"K\"]*(1-pars[\"d\"]/pars[\"b\"])\nprint(\"Seq = \", Seq_ana)\n# plot and compare\nplt.plot(T,S,'k', label=\"$S(t)$\")\nplt.scatter(T[-1],Seq_num,color='red', label=\"$S^* numerically$\")\nplt.plot(T,np.repeat(Seq_ana,len(T)),color='green', label=\"$S^* analytically$\")\nplt.legend(edgecolor='k')\nplt.xlabel('Time ($h$)')\nplt.ylabel('S cell/mL')\nplt.title(\"SV numerical integration\")\n</pre> Seq_ana = pars[\"K\"]*(1-pars[\"d\"]/pars[\"b\"]) print(\"Seq = \", Seq_ana) # plot and compare plt.plot(T,S,'k', label=\"$S(t)$\") plt.scatter(T[-1],Seq_num,color='red', label=\"$S^* numerically$\") plt.plot(T,np.repeat(Seq_ana,len(T)),color='green', label=\"$S^* analytically$\") plt.legend(edgecolor='k') plt.xlabel('Time ($h$)') plt.ylabel('S cell/mL') plt.title(\"SV numerical integration\") <pre>Seq =  55263157.89473685\n</pre> Out[5]: <pre>Text(0.5, 1.0, 'SV numerical integration')</pre> <p>Question: What is the value of R_0 and what can you tell about the viral invasion? Simulate the dynamical system, do the viruses increase in abundance?</p> <p>Answer: The reproduction number is the number of newly infected induced by one infected in a fully susceptible population. It is a threshold value, that indicates if the virus is going to invade or being washed-out. When $$R0 &gt; 1$$ the virus has a positive growth rate and invade the population, when $$R0 &lt;= 1$$ the virus has negative or null population growth rate and is not able to invade. We want to find a condition for invasion, you can solve $$\\dot{V} &gt; 0 (\\text{ at } S\u2217)$$ (disease free equilibrium) for a initial inoculation of virus V0:</p> <p>$$ \\dot{V} = \\beta\\phi S^* V_0 - \\phi S^* V_0 -mV_0 $$ $$ iff, \\frac{\\beta\\phi S^*}{\\phi S^*+m} &gt;1 $$</p> <p>The basic reproduction number of the system is $$ R_0 =\\frac{\\beta\\phi S^*}{\\phi S^*+m}$$</p> In\u00a0[7]: Copied! <pre>R0 = pars[\"beta\"]*pars[\"phi\"]*Seq_ana/(pars[\"phi\"]*Seq_ana+pars[\"m\"])\nprint(\"R0 =\",R0)\n</pre> R0 = pars[\"beta\"]*pars[\"phi\"]*Seq_ana/(pars[\"phi\"]*Seq_ana+pars[\"m\"]) print(\"R0 =\",R0) <pre>R0 = 23.525805372868135\n</pre> In\u00a0[8]: Copied! <pre># Initial population size\ny0 = np.zeros(2)\ny0[0] = Seq_ana;\ny0[1] = 100;\ndy = integrate.odeint(SV_ode,y0,T,args=(pars,))\nS = dy[:,0]\nV = dy[:,1]\n# plot\nplt.semilogy(T,S,'k', label=\"$S(t)$\")\nplt.semilogy(T,V,'r', label=\"$V(t)$\")\nplt.scatter(0,Seq_num,color='red', label=\"$DFE$\")\nplt.legend(edgecolor='k')\nplt.xlabel('Time ($h$)')\nplt.ylabel('S cell/mL')\nplt.title(\"SV numerical integration\")\n</pre> # Initial population size y0 = np.zeros(2) y0[0] = Seq_ana; y0[1] = 100; dy = integrate.odeint(SV_ode,y0,T,args=(pars,)) S = dy[:,0] V = dy[:,1] # plot plt.semilogy(T,S,'k', label=\"$S(t)$\") plt.semilogy(T,V,'r', label=\"$V(t)$\") plt.scatter(0,Seq_num,color='red', label=\"$DFE$\") plt.legend(edgecolor='k') plt.xlabel('Time ($h$)') plt.ylabel('S cell/mL') plt.title(\"SV numerical integration\") Out[8]: <pre>Text(0.5, 1.0, 'SV numerical integration')</pre> In\u00a0[10]: Copied! <pre># 1) numerical method\n# plot over T and find the exponential phase\nplt.scatter(T,np.log(V))\n\nplt.scatter(T[1:15],np.log(V[1:15]))\n# linear regression\nfrom sklearn.linear_model import LinearRegression\nx_reg = T[1:15].reshape((-1, 1))\ny_reg = np.log(V[1:15])\nreg_model = LinearRegression().fit(x_reg, y_reg)\nr_sq = reg_model.score(x_reg, y_reg)\nprint(f\"coefficient of determination: {r_sq}\")\nr_num = reg_model.coef_\nprint(f\"r_num: {r_num}\")\n# 2) analytical method\nr_ana = (pars[\"beta\"]-1)*pars[\"phi\"]*pars[\"K\"]*(1-pars[\"d\"]/pars[\"b\"])-pars[\"m\"]\nprint(f\"r_ana = :{r_ana}\")\n</pre> # 1) numerical method # plot over T and find the exponential phase plt.scatter(T,np.log(V))  plt.scatter(T[1:15],np.log(V[1:15])) # linear regression from sklearn.linear_model import LinearRegression x_reg = T[1:15].reshape((-1, 1)) y_reg = np.log(V[1:15]) reg_model = LinearRegression().fit(x_reg, y_reg) r_sq = reg_model.score(x_reg, y_reg) print(f\"coefficient of determination: {r_sq}\") r_num = reg_model.coef_ print(f\"r_num: {r_num}\") # 2) analytical method r_ana = (pars[\"beta\"]-1)*pars[\"phi\"]*pars[\"K\"]*(1-pars[\"d\"]/pars[\"b\"])-pars[\"m\"] print(f\"r_ana = :{r_ana}\") <pre>coefficient of determination: 0.9999999087304561\nr_num: [1.77215286]\nr_ana = :1.7726228070175436\n</pre> <p>Finally, plot the dynamics in the phase plane and evaluate whether the system converges to a new coexistence equilibrium - in doing so compare the equilibrium to theory, noting how the bacterial density changes and to what extent the dynamics exhibit cycles or not.</p> <p>Question: Finally, plot the dynamics in the phase plane and evaluate whether the system converges to a new coexistence equilibrium - in doing so compare the equilibrium to theory, noting how the bacterial density changes and to what extent the dynamics exhibit cycles or not.</p> <p>Answer: Range over the phi to see how the solution trajectories change in the phase. For sufficient small \u03d5, no invasion will occur. For large enough \u03d5, invasion occurs, and you can find closed cycles by running out long enough. For intermediate values of \u03d5, invasion occurs but population now tend towards and an equilibrium point.</p> <p>The endemic equilibrium is $$ S^* = m/(\\beta -1)\\phi $$ $$ V^* = \\frac{1}{\\phi} (d-b-\\frac{bm}{(\\beta -1)\\phi K})  $$</p> In\u00a0[11]: Copied! <pre># Integrate the model numerically\n# time\nt0=0 #Initial Time\ndt=0.1\ntf=5000 #Final time\nT = np.arange(t0,tf,dt)\n# Initial conditions\ny0 = np.zeros(2)\n\n\n### Low phi\npars['phi'] = 1E-12;\ny0[0] = 1000;\ny0[1] = 100;\ndy = integrate.odeint(SV_ode,y0, T, args=(pars,))\nS = dy[:,0];\nV = dy[:,1];\nplt.figure(0)\nplt.loglog(S,V,linewidth=2)\nplt.scatter(y0[0],y0[1],color='red',label='Initial condition')\nplt.scatter(S[-1],V[-1],color='green',label='final condition')\nplt.scatter(Seq_ana,1E-20,color='blue',label='DFE')\nplt.vlines(Seq_ana,ymin=min(V),ymax=max(V),color='k',zorder=1)\nplt.xlabel(\"Microbe S\")\nplt.ylabel(\"Virus V\")\nplt.title(\"low $\\phi$\")\nplt.legend()\nplt.show()\n\n\n### Medium phi\npars['phi'] = 1E-9;\nSeq = pars[\"m\"]/((pars[\"beta\"]-1)*pars[\"phi\"])\nVeq = (1/pars[\"phi\"])*(pars[\"b\"]*(1-Seq/pars[\"K\"])-pars[\"d\"])\ny0[0] = 1000;\ny0[1] = 100;\ndy = integrate.odeint(SV_ode,y0, T, args=(pars,))\nS = dy[:,0];\nV = dy[:,1];\nplt.figure(1)\nplt.loglog(S,V,linewidth=2,zorder=-1)\nplt.scatter(y0[0],y0[1],color='red',label='Initial condition')\nplt.scatter(S[-1],V[-1],color='green',label='final condition')\nplt.scatter(Seq,Veq,color='k',label='Endemic Eq.')\nplt.vlines(Seq,ymin=min(V),ymax=max(V),color='k',zorder=1)\nplt.hlines(Veq,xmin=min(S),xmax=max(S),color='k',zorder=1)\nplt.xlabel(\"Microbe S\")\nplt.ylabel(\"Virus V\")\nplt.title(\"Medium $\\phi$\")\nplt.legend()\nplt.show()\n\n### High phi\npars['phi']\n### High phi\npars['phi'] = 1E-5;\nSeq = pars[\"m\"]/((pars[\"beta\"]-1)*pars[\"phi\"])\nVeq = (1/pars[\"phi\"])*(pars[\"b\"]*(1-Seq/pars[\"K\"])-pars[\"d\"])\ny0[0] = Seq+250;\ny0[1] = Veq+500;\ndy = integrate.odeint(SV_ode,y0, T, args=(pars,))\nS = dy[:,0];\nV = dy[:,1];\nplt.figure(2)\nplt.loglog(S,V,linewidth=2,zorder=-1)\nplt.scatter(y0[0],y0[1],color='red',label='Initial condition')\nplt.scatter(S[-1],V[-1],color='green',label='final condition')\nplt.vlines(Seq,ymin=min(V),ymax=max(V),color='k',zorder=1)\nplt.hlines(Veq,xmin=min(S),xmax=max(S),color='k',zorder=1)\nplt.xlabel(\"Microbe S\")\nplt.ylabel(\"Virus V\")\nplt.title(\"High $\\phi$\")\nplt.legend(loc='upper left')\nplt.show()\n</pre> # Integrate the model numerically # time t0=0 #Initial Time dt=0.1 tf=5000 #Final time T = np.arange(t0,tf,dt) # Initial conditions y0 = np.zeros(2)   ### Low phi pars['phi'] = 1E-12; y0[0] = 1000; y0[1] = 100; dy = integrate.odeint(SV_ode,y0, T, args=(pars,)) S = dy[:,0]; V = dy[:,1]; plt.figure(0) plt.loglog(S,V,linewidth=2) plt.scatter(y0[0],y0[1],color='red',label='Initial condition') plt.scatter(S[-1],V[-1],color='green',label='final condition') plt.scatter(Seq_ana,1E-20,color='blue',label='DFE') plt.vlines(Seq_ana,ymin=min(V),ymax=max(V),color='k',zorder=1) plt.xlabel(\"Microbe S\") plt.ylabel(\"Virus V\") plt.title(\"low $\\phi$\") plt.legend() plt.show()   ### Medium phi pars['phi'] = 1E-9; Seq = pars[\"m\"]/((pars[\"beta\"]-1)*pars[\"phi\"]) Veq = (1/pars[\"phi\"])*(pars[\"b\"]*(1-Seq/pars[\"K\"])-pars[\"d\"]) y0[0] = 1000; y0[1] = 100; dy = integrate.odeint(SV_ode,y0, T, args=(pars,)) S = dy[:,0]; V = dy[:,1]; plt.figure(1) plt.loglog(S,V,linewidth=2,zorder=-1) plt.scatter(y0[0],y0[1],color='red',label='Initial condition') plt.scatter(S[-1],V[-1],color='green',label='final condition') plt.scatter(Seq,Veq,color='k',label='Endemic Eq.') plt.vlines(Seq,ymin=min(V),ymax=max(V),color='k',zorder=1) plt.hlines(Veq,xmin=min(S),xmax=max(S),color='k',zorder=1) plt.xlabel(\"Microbe S\") plt.ylabel(\"Virus V\") plt.title(\"Medium $\\phi$\") plt.legend() plt.show()  ### High phi pars['phi'] ### High phi pars['phi'] = 1E-5; Seq = pars[\"m\"]/((pars[\"beta\"]-1)*pars[\"phi\"]) Veq = (1/pars[\"phi\"])*(pars[\"b\"]*(1-Seq/pars[\"K\"])-pars[\"d\"]) y0[0] = Seq+250; y0[1] = Veq+500; dy = integrate.odeint(SV_ode,y0, T, args=(pars,)) S = dy[:,0]; V = dy[:,1]; plt.figure(2) plt.loglog(S,V,linewidth=2,zorder=-1) plt.scatter(y0[0],y0[1],color='red',label='Initial condition') plt.scatter(S[-1],V[-1],color='green',label='final condition') plt.vlines(Seq,ymin=min(V),ymax=max(V),color='k',zorder=1) plt.hlines(Veq,xmin=min(S),xmax=max(S),color='k',zorder=1) plt.xlabel(\"Microbe S\") plt.ylabel(\"Virus V\") plt.title(\"High $\\phi$\") plt.legend(loc='upper left') plt.show() <p>Question: Is R0 &gt; 1? Simulate the dynamical system and conclude on the invasion of the virus.</p> <p>Answer For zero initial viral density. $$ \\dot{S} = 0$$ $$ S^*_{DFE} = K(1-\\frac{d}{b})$$</p> <p>R0 = viral production * probability to infect before virus die * probability to lyse before cells die. S0, $$ R_0 = \\beta  \\frac{mS^*}{mS^*+m} \\frac{\\eta}{\\eta+d}$$</p> In\u00a0[13]: Copied! <pre>#Estimate the R0\n# parameters\npars={}\npars[\"phi\"] = 6.7E-10\npars[\"m\"] = 1/24\npars[\"d\"] = 1/4\npars[\"b\"] = 0.95\npars[\"K\"] = 5E6\npars[\"beta\"] = 50\npars[\"eta\"] = 0.5\n# DFE\nS_DFE = pars[\"K\"]*(1-pars[\"d\"]/pars[\"b\"])\nprod = pars[\"beta\"]\nproba_lyse = pars[\"phi\"]*S_DFE/(pars[\"phi\"]*S_DFE+pars[\"m\"])\nproba_inf = pars[\"eta\"]/(pars[\"eta\"]+pars[\"d\"])\n\n\nR0 = prod*proba_lyse*proba_inf\nprint(R0)\n</pre> #Estimate the R0 # parameters pars={} pars[\"phi\"] = 6.7E-10 pars[\"m\"] = 1/24 pars[\"d\"] = 1/4 pars[\"b\"] = 0.95 pars[\"K\"] = 5E6 pars[\"beta\"] = 50 pars[\"eta\"] = 0.5 # DFE S_DFE = pars[\"K\"]*(1-pars[\"d\"]/pars[\"b\"]) prod = pars[\"beta\"] proba_lyse = pars[\"phi\"]*S_DFE/(pars[\"phi\"]*S_DFE+pars[\"m\"]) proba_inf = pars[\"eta\"]/(pars[\"eta\"]+pars[\"d\"])   R0 = prod*proba_lyse*proba_inf print(R0)  <pre>1.8642922447032637\n</pre> In\u00a0[14]: Copied! <pre># SIV model function\ndef SIV_ode(y,t,pars):\n    \"\"\"\n    returns the rate of change of host and virus in the standard SIV model\n    \"\"\"\n    # initialization\n    dydt=np.zeros(3)\n    S = y[0]\n    I = y[1]\n    V = y[2]\n    # Parameters\n    phi = pars[\"phi\"]\n    m = pars[\"m\"]\n    d = pars[\"d\"]\n    b = pars[\"b\"]\n    K = pars[\"K\"]\n    beta = pars[\"beta\"]\n    eta = pars[\"eta\"]\n    # system of ODEs\n    dydt[0] = b*S*(1-S/K) - phi*S*V - d*S\n    dydt[1] = phi*S*V - eta*I - d*I\n    dydt[2] = beta*eta*I - phi*S*V - m*V\n    return dydt\n</pre> # SIV model function def SIV_ode(y,t,pars):     \"\"\"     returns the rate of change of host and virus in the standard SIV model     \"\"\"     # initialization     dydt=np.zeros(3)     S = y[0]     I = y[1]     V = y[2]     # Parameters     phi = pars[\"phi\"]     m = pars[\"m\"]     d = pars[\"d\"]     b = pars[\"b\"]     K = pars[\"K\"]     beta = pars[\"beta\"]     eta = pars[\"eta\"]     # system of ODEs     dydt[0] = b*S*(1-S/K) - phi*S*V - d*S     dydt[1] = phi*S*V - eta*I - d*I     dydt[2] = beta*eta*I - phi*S*V - m*V     return dydt In\u00a0[15]: Copied! <pre># Numerical time\nt0 = 0 # Initial time\ntf = 2000 # Final time\nT = np.linspace(t0,tf) # time steps to report\n# parameters\npars={}\npars[\"phi\"] = 6.7E-10\npars[\"m\"] = 1/24\npars[\"d\"] = 1/4\npars[\"b\"] = 0.95\npars[\"K\"] = 5E6\npars[\"beta\"] = 50\npars[\"eta\"] = 0.5\n# Initial population size\ny0 = np.zeros(3)\ny0[0] = S_DFE;\ny0[2] = 100;\n# integration\ndy = integrate.odeint(SIV_ode,y0,T,args=(pars,))\nS = dy[:,0]\nI = dy[:,1]\nV = dy[:,2]\n# plot\nplt.semilogy(T,S+I,'k', label=\"$S(t)+I(t)$\")\nplt.semilogy(T,S,'g', label=\"$S(t)$\")\nplt.semilogy(T,V,'r', label=\"$V(t)$\")\nplt.scatter(0,S_DFE,color='red', label=\"$DFE$\")\nplt.legend(edgecolor='k')\nplt.xlabel('Time ($h$)')\nplt.ylabel('S cell/mL')\nplt.title(\"SV numerical integration\")\nplt.show()\n</pre> # Numerical time t0 = 0 # Initial time tf = 2000 # Final time T = np.linspace(t0,tf) # time steps to report # parameters pars={} pars[\"phi\"] = 6.7E-10 pars[\"m\"] = 1/24 pars[\"d\"] = 1/4 pars[\"b\"] = 0.95 pars[\"K\"] = 5E6 pars[\"beta\"] = 50 pars[\"eta\"] = 0.5 # Initial population size y0 = np.zeros(3) y0[0] = S_DFE; y0[2] = 100; # integration dy = integrate.odeint(SIV_ode,y0,T,args=(pars,)) S = dy[:,0] I = dy[:,1] V = dy[:,2] # plot plt.semilogy(T,S+I,'k', label=\"$S(t)+I(t)$\") plt.semilogy(T,S,'g', label=\"$S(t)$\") plt.semilogy(T,V,'r', label=\"$V(t)$\") plt.scatter(0,S_DFE,color='red', label=\"$DFE$\") plt.legend(edgecolor='k') plt.xlabel('Time ($h$)') plt.ylabel('S cell/mL') plt.title(\"SV numerical integration\") plt.show() <p>Answer: No, when the burst size is too low, then R0 &lt; 1 and the invasion is not possible. Calculate the critical burst size using the equation of R0 &gt; 1.</p> In\u00a0[18]: Copied! <pre>#\\beta = 10\n# Numerical time\nt0 = 0 # Initial time\ntf = 2000 # Final time\nT = np.linspace(t0,tf) # time steps to report\n# parameters\npars[\"beta\"] = 10\n# Initial population size\ny0 = np.zeros(3)\ny0[0] = S_DFE\ny0[2] = 100;\n# integration\ndy = integrate.odeint(SIV_ode,y0,T,args=(pars,))\nS = dy[:,0]\nI = dy[:,1]\nV = dy[:,2]\n# plot\nplt.semilogy(T,S+I,'k', label=\"$S(t)+I(t)$\")\nplt.semilogy(T,S,'g', label=\"$S(t)$\")\nplt.semilogy(T,V,'r', label=\"$V(t)$\")\nplt.scatter(0,S_DFE,color='red', label=\"$DFE$\")\nplt.legend(edgecolor='k')\nplt.xlabel('Time ($h$)')\nplt.ylabel('S cell/mL')\nplt.title(\"SV numerical integration\")\n</pre> #\\beta = 10 # Numerical time t0 = 0 # Initial time tf = 2000 # Final time T = np.linspace(t0,tf) # time steps to report # parameters pars[\"beta\"] = 10 # Initial population size y0 = np.zeros(3) y0[0] = S_DFE y0[2] = 100; # integration dy = integrate.odeint(SIV_ode,y0,T,args=(pars,)) S = dy[:,0] I = dy[:,1] V = dy[:,2] # plot plt.semilogy(T,S+I,'k', label=\"$S(t)+I(t)$\") plt.semilogy(T,S,'g', label=\"$S(t)$\") plt.semilogy(T,V,'r', label=\"$V(t)$\") plt.scatter(0,S_DFE,color='red', label=\"$DFE$\") plt.legend(edgecolor='k') plt.xlabel('Time ($h$)') plt.ylabel('S cell/mL') plt.title(\"SV numerical integration\") Out[18]: <pre>Text(0.5, 1.0, 'SV numerical integration')</pre> <p>So the invasion criterion, i.e., where the basic reproduction number R0 is greater than 0 is $$ \\beta_{critical} &gt; \\frac{(\\eta+d)(\\phi S^* +m)}{\\eta\\phi S^*} $$</p> In\u00a0[20]: Copied! <pre># Estimate the minimum number of burst needed for invasion:\nnum = (pars[\"eta\"]+pars[\"d\"])*(pars[\"phi\"]*S_DFE+pars[\"m\"])\nden = pars[\"eta\"]*pars[\"phi\"]*S_DFE\nbeta_crit = num/den\nprint(beta_crit)\nBrange = np.linspace(1,100,num=20)\nfor i in range(len(Brange)):\n    pars['beta']=Brange[i] #Set the value of K\n    prod = pars[\"beta\"]\n    proba_lyse = pars[\"phi\"]*S_DFE/(pars[\"phi\"]*S_DFE+pars[\"m\"])\n    proba_inf = pars[\"eta\"]/(pars[\"eta\"]+pars[\"d\"])\n    R0 = prod*proba_lyse*proba_inf\n    plt.scatter(pars[\"beta\"],R0,color=np.array([0.75,0.75,0.75])*i/len(Brange),label=\"$R0(\\beta)$\")\n    plt.hlines(1,xmin=0,xmax=100,label=\"$R0=1$\")\n    plt.scatter(beta_crit,1,color='red',label=\"$\\beta_{crit}$\")\n    plt.xlabel(\"Burst Size\")\n    plt.ylabel(\"$R0$\")\n</pre> # Estimate the minimum number of burst needed for invasion: num = (pars[\"eta\"]+pars[\"d\"])*(pars[\"phi\"]*S_DFE+pars[\"m\"]) den = pars[\"eta\"]*pars[\"phi\"]*S_DFE beta_crit = num/den print(beta_crit) Brange = np.linspace(1,100,num=20) for i in range(len(Brange)):     pars['beta']=Brange[i] #Set the value of K     prod = pars[\"beta\"]     proba_lyse = pars[\"phi\"]*S_DFE/(pars[\"phi\"]*S_DFE+pars[\"m\"])     proba_inf = pars[\"eta\"]/(pars[\"eta\"]+pars[\"d\"])     R0 = prod*proba_lyse*proba_inf     plt.scatter(pars[\"beta\"],R0,color=np.array([0.75,0.75,0.75])*i/len(Brange),label=\"$R0(\\beta)$\")     plt.hlines(1,xmin=0,xmax=100,label=\"$R0=1$\")     plt.scatter(beta_crit,1,color='red',label=\"$\\beta_{crit}$\")     plt.xlabel(\"Burst Size\")     plt.ylabel(\"$R0$\") <pre>26.819829424307034\n</pre> <p>Returning to burst size of 50, consider what happens if the viral lysis rate \u03b7 decreases from 1 to 0.1 h. Question: Do the viruses always invade? Why or why not? If there is a critical point in the dynamics? Does it agree with your theoretical expectations? Answer: Similarly than the burst size, when the lysis rate is too low, then R0 &lt; 1 and the invasion is not possible.</p> In\u00a0[22]: Copied! <pre># \\eta = 0.1 h^{-1}\n# parameters\npars[\"beta\"] = 50\npars[\"eta\"]=0.1\n# Initial population size\ny0 = np.zeros(3)\ny0[0] = S_DFE;\ny0[2] = 100;\n# integration\ndy = integrate.odeint(SIV_ode,y0,T,args=(pars,))\nS = dy[:,0]\nI = dy[:,1]\nV = dy[:,2]\n# plot\nplt.semilogy(T,S+I,'k', label=\"$S(t)+I(t)$\")\nplt.semilogy(T,S,'g', label=\"$S(t)$\")\nplt.semilogy(T,V,'r', label=\"$V(t)$\")\nplt.scatter(0,S_DFE,color='red', label=\"$DFE$\")\nplt.legend(edgecolor='k')\nplt.xlabel('Time ($h$)')\nplt.ylabel('S cell/mL')\nplt.title(\"SV numerical integration\")\n</pre> # \\eta = 0.1 h^{-1} # parameters pars[\"beta\"] = 50 pars[\"eta\"]=0.1 # Initial population size y0 = np.zeros(3) y0[0] = S_DFE; y0[2] = 100; # integration dy = integrate.odeint(SIV_ode,y0,T,args=(pars,)) S = dy[:,0] I = dy[:,1] V = dy[:,2] # plot plt.semilogy(T,S+I,'k', label=\"$S(t)+I(t)$\") plt.semilogy(T,S,'g', label=\"$S(t)$\") plt.semilogy(T,V,'r', label=\"$V(t)$\") plt.scatter(0,S_DFE,color='red', label=\"$DFE$\") plt.legend(edgecolor='k') plt.xlabel('Time ($h$)') plt.ylabel('S cell/mL') plt.title(\"SV numerical integration\") Out[22]: <pre>Text(0.5, 1.0, 'SV numerical integration')</pre> <p>Estimate the threshold value of \u03b7 by considering, basic reproduction number greater than 1 as, $$ \\eta_{crit} = \\frac{d(\\phi S^* +m)}{\\beta\\phi S^* -\\phi S^* -m} $$</p> In\u00a0[26]: Copied! <pre>num = pars[\"d\"]*(pars[\"phi\"]*S_DFE + pars[\"m\"])\nden = pars[\"beta\"]*pars[\"phi\"]*S_DFE - pars[\"phi\"]*S_DFE - pars[\"m\"]\neta_crit = num/den\nprint(eta_crit)\n</pre> num = pars[\"d\"]*(pars[\"phi\"]*S_DFE + pars[\"m\"]) den = pars[\"beta\"]*pars[\"phi\"]*S_DFE - pars[\"phi\"]*S_DFE - pars[\"m\"] eta_crit = num/den print(eta_crit) <pre>0.011129072370057199\n</pre> In\u00a0[25]: Copied! <pre># Integrate the model numerically\n# parameters\npars={}\npars[\"phi\"] = 6.7E-10\n\npars[\"m\"] = 1/24\npars[\"d\"] = 1/4\npars[\"b\"] = 0.95\npars[\"K\"] = 5E6\npars[\"beta\"] = 50\npars[\"eta\"] = 0.5\n# time\nt0=0 #Initial Time\ndt=0.1\ntf=5000 #Final time\nT = np.arange(t0,tf,dt)\n# Initial conditions\ny0 = np.zeros(3)\n### Low phi\npars['phi'] = 1E-12;\ny0[0] = 1000;\ny0[1] = 0\ny0[2] = 100;\ndy = integrate.odeint(SIV_ode,y0, T, args=(pars,))\nS = dy[:,0];\nI = dy[:,1];\nV = dy[:,2];\nplt.figure(0)\nplt.loglog(S,V,linewidth=2)\nplt.scatter(y0[0],y0[2],color='red',label='Initial condition')\nplt.scatter(S[-1],V[-1],color='green',label='final condition')\nplt.scatter(S_DFE,1E-20,color='blue',label='DFE')\nplt.xlabel(\"Microbe S\")\nplt.ylabel(\"Virus V\")\nplt.title(\"low $\\phi$\")\nplt.legend()\nplt.show()\n\n\n### Medium phi\npars['phi'] = 1E-9;\ny0[0] = 1000;\ny0[1] = 0;\ny0[2] = 100;\ndy = integrate.odeint(SIV_ode,y0, T, args=(pars,))\nS = dy[:,0];\nI = dy[:,1];\nV = dy[:,2];\nplt.figure(1)\nplt.loglog(S,V,linewidth=2,zorder=-1)\nplt.scatter(y0[0],y0[2],color='red',label='Initial condition')\nplt.scatter(S[-1],V[-1],color='green',label='final condition')\nplt.xlabel(\"Microbe S\")\nplt.ylabel(\"Virus V\")\nplt.title(\"Medium $\\phi$\")\nplt.legend()\nplt.show()\n\n### Medium phi 2\npars['phi'] = 5E-9;#1E-8;\ny0[0] = 100;\ny0[1] = 0;\ny0[2] = 1E6;\ndy = integrate.odeint(SIV_ode,y0, T, args=(pars,))\nS = dy[:,0];\nI = dy[:,1];\nV = dy[:,2];\nplt.figure(2)\nplt.loglog(S,V,linewidth=2,zorder=-1)\nplt.scatter(y0[0],y0[2],color='red',label='Initial condition')\nplt.scatter(S[-1],V[-1],color='green',label='final condition',zorder=1)\nplt.xlabel(\"Microbe S\")\nplt.ylabel(\"Virus V\")\nplt.title(\"Medium $\\phi$\")\nplt.legend()\nplt.show()\n\n\n### Medium phi 2\npars['phi'] = 1E-8;\ny0[0] = 100;\ny0[1] = 0;\ny0[2] = 1E6;\ndy = integrate.odeint(SIV_ode,y0, T, args=(pars,))\nS = dy[:,0];\nI = dy[:,1];\nV = dy[:,2];\nplt.figure(3)\nplt.loglog(S,V,linewidth=2,zorder=-1)\nplt.scatter(y0[0],y0[2],color='red',label='Initial condition')\nplt.scatter(S[-1],V[-1],color='green',label='final condition',zorder=1)\nplt.xlabel(\"Microbe S\")\nplt.ylabel(\"Virus V\")\nplt.title(\"High $\\phi$\")\nplt.legend()\nplt.show()\n</pre> # Integrate the model numerically # parameters pars={} pars[\"phi\"] = 6.7E-10  pars[\"m\"] = 1/24 pars[\"d\"] = 1/4 pars[\"b\"] = 0.95 pars[\"K\"] = 5E6 pars[\"beta\"] = 50 pars[\"eta\"] = 0.5 # time t0=0 #Initial Time dt=0.1 tf=5000 #Final time T = np.arange(t0,tf,dt) # Initial conditions y0 = np.zeros(3) ### Low phi pars['phi'] = 1E-12; y0[0] = 1000; y0[1] = 0 y0[2] = 100; dy = integrate.odeint(SIV_ode,y0, T, args=(pars,)) S = dy[:,0]; I = dy[:,1]; V = dy[:,2]; plt.figure(0) plt.loglog(S,V,linewidth=2) plt.scatter(y0[0],y0[2],color='red',label='Initial condition') plt.scatter(S[-1],V[-1],color='green',label='final condition') plt.scatter(S_DFE,1E-20,color='blue',label='DFE') plt.xlabel(\"Microbe S\") plt.ylabel(\"Virus V\") plt.title(\"low $\\phi$\") plt.legend() plt.show()   ### Medium phi pars['phi'] = 1E-9; y0[0] = 1000; y0[1] = 0; y0[2] = 100; dy = integrate.odeint(SIV_ode,y0, T, args=(pars,)) S = dy[:,0]; I = dy[:,1]; V = dy[:,2]; plt.figure(1) plt.loglog(S,V,linewidth=2,zorder=-1) plt.scatter(y0[0],y0[2],color='red',label='Initial condition') plt.scatter(S[-1],V[-1],color='green',label='final condition') plt.xlabel(\"Microbe S\") plt.ylabel(\"Virus V\") plt.title(\"Medium $\\phi$\") plt.legend() plt.show()  ### Medium phi 2 pars['phi'] = 5E-9;#1E-8; y0[0] = 100; y0[1] = 0; y0[2] = 1E6; dy = integrate.odeint(SIV_ode,y0, T, args=(pars,)) S = dy[:,0]; I = dy[:,1]; V = dy[:,2]; plt.figure(2) plt.loglog(S,V,linewidth=2,zorder=-1) plt.scatter(y0[0],y0[2],color='red',label='Initial condition') plt.scatter(S[-1],V[-1],color='green',label='final condition',zorder=1) plt.xlabel(\"Microbe S\") plt.ylabel(\"Virus V\") plt.title(\"Medium $\\phi$\") plt.legend() plt.show()   ### Medium phi 2 pars['phi'] = 1E-8; y0[0] = 100; y0[1] = 0; y0[2] = 1E6; dy = integrate.odeint(SIV_ode,y0, T, args=(pars,)) S = dy[:,0]; I = dy[:,1]; V = dy[:,2]; plt.figure(3) plt.loglog(S,V,linewidth=2,zorder=-1) plt.scatter(y0[0],y0[2],color='red',label='Initial condition') plt.scatter(S[-1],V[-1],color='green',label='final condition',zorder=1) plt.xlabel(\"Microbe S\") plt.ylabel(\"Virus V\") plt.title(\"High $\\phi$\") plt.legend() plt.show()"},{"location":"day1_eco_evo_principles/python_exercises_day1/#python-exercises","title":"Python - Exercises\u00b6","text":""},{"location":"day1_eco_evo_principles/python_exercises_day1/#sv-lytic-model","title":"SV lytic model\u00b6","text":""},{"location":"day1_eco_evo_principles/python_exercises_day1/#simulate-a-viral-invasion-","title":"Simulate a viral invasion -\u00b6","text":"<p>Consider the SV model for lytic infections with susceptible cells (S) and free viruses (V) given by, \\begin{align} \\dot{S} &amp;= bS (1- S/K) - \\phi SV - dS\\\\ \\dot{V} &amp;= \\beta\\phi SV - \\phi SV - mV \\end{align}</p> <p>use the following set of parameter values:</p> <p>$$ \\phi = 6.7 \\times 10^{-10} \\ \\mathrm{mL} \\ \\mathrm{h}^{-1} $$ $$  m = 1/24 h^{\u22121} $$ $$ d = 1/4 h^{\u22121}$$ $$ b = 0.95 h^{\u22121}$$ $$ K = 7.5\\times 10^7 \\text{cell mL}^{\u22121}$$ $$ \\beta = 50$$ virus/cell</p>"},{"location":"day1_eco_evo_principles/python_exercises_day1/#sv-simulation","title":"SV simulation\u00b6","text":"<p>Starting with the SV model, initiate an \u2018inoculation\u2019, adding $S0 = 10^4 $cell/mL of microbe, and then letting the population reach its equilibrium after approximately 24 h.</p> <p>Question: What population density does it reach? Is it what you expect? Compare your numerical simulation of S at the end of the simulation with the value of the equilibrium that you found analytically. Numerically, create a function describing the SV model and integrate it using python.</p>"},{"location":"day1_eco_evo_principles/python_exercises_day1/#finding-out-basic-reproduction-number","title":"Finding out basic reproduction number\u00b6","text":"<p>Beginning from the disease-free equilibrium, add V0 = 100 virus/mL and using \u03b2 = 50 virus/cell for the burst size, estimate the basic reproduction number R0.</p>"},{"location":"day1_eco_evo_principles/python_exercises_day1/#estimating-growth-rate-of-virus-population","title":"Estimating growth rate of virus population\u00b6","text":"<p>Estimate the growth rate of the virus population. Question: Does it agree with your theoretical expectations? Answer: Evaluate $$ \\dot{V}|_{S= S^\u2217}$$.</p> <p>$$ 1/V dV/dt = \\beta\\phi S^* - \\phi S^* -m  $$. $$ r = \\beta\\phi S^* - \\phi S^* -m  $$</p> <p>Replacing $$ S^*$$ by is expression and re-arranging: $$ r = (\\beta-1)\\phi K (1-d/b) -m  $$</p> <p>Numerically estimate the slope of log(V ) over time during the exponential growth phase and compare with the above equation for r with parameter values substituted.</p>"},{"location":"day1_eco_evo_principles/python_exercises_day1/#phase-space-plots","title":"Phase space plots\u00b6","text":""},{"location":"day1_eco_evo_principles/python_exercises_day1/#siv-model","title":"SIV model\u00b6","text":"<p>Consider the SIV model with susceptible S cells, infected I cells and free virus particles V ,</p> <p>\\begin{align} \\dot{S} &amp;= bS (1- \\frac{S+I}{K}) - \\phi SV - dS\\\\ \\dot{I} &amp;= \\phi SV - \\eta I - dI\\\\ \\dot{V} &amp;= \\beta\\phi SV - \\phi SV - mV \\end{align}</p> <p>Use the following set of parameter values:</p> <p>$$ \\phi = 6.7 \\times 10^{-10} \\ \\mathrm{mL} \\ \\mathrm{h}^{-1} $$ $$  m = 1/24 h^{\u22121} $$ $$ d = 1/4 h^{\u22121}$$ $$ b = 0.95 h^{\u22121}$$ $$ \\eta = 1 h^{\u22121}$$ $$ K = 5\\times 10^7 \\text{cell mL}^{\u22121}$$</p>"},{"location":"day1_eco_evo_principles/python_exercises_day1/#basic-reproduction-number","title":"Basic reproduction number\u00b6","text":"<p>Beginning from the disease-free equilibrium, add V0 = 100 virus/mL with a burst \u03b2 = 50 virus/cell and a lysis rate \u03b7 = 0.5 hours. Estimate the basic reproduction number R0.</p>"},{"location":"day1_eco_evo_principles/python_exercises_day1/#modulating-the-viral-burst-size","title":"Modulating the viral burst size\u00b6","text":"<p>Question: Do the viruses always invade? Why or why not? there is a critical point in the dynamics? Does it agree with your theoretical expectations?</p>"},{"location":"day1_eco_evo_principles/python_exercises_day1/#decrease-of-lysis-rate","title":"Decrease of lysis rate\u00b6","text":""},{"location":"day1_eco_evo_principles/python_exercises_day1/#phase-space-dynamics","title":"Phase space dynamics\u00b6","text":"<p>Finally, plot the dynamics in the S-V phase plane and evaluate whether the system converges to a new coexistence equilibrium - in doing so, compare the equilibrium to theory, noting how the bacterial density changes, and to what extent the dynamics exhibit cycles or not.</p>"},{"location":"day1_eco_evo_principles/python_notebook_day1/","title":"Python - Lectures","text":"<p>If you need installation help you can read the documentation here or ask one of the TAs.</p> <p>Once you have a lot of commands, it will get exhausting typing them again and again (especially when you make mistakes). Instead, you will want to use a \\script\". A script is a list of commands in a \u2002le that you can execute directly from the command window. To create a script go to the File menu and select New &gt; File. Now type in a few commands, such as:</p> In\u00a0[1]: Copied! <pre>#my_first_file.py\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Create some vectors\nx = np.arange(1,10,0.1)\ny1 = np.exp(0.5*x)\ny2 = np.exp(0.6*x)\n#plot the vectors\nplt.plot(x,y1,'k') #Use a black line\nplt.plot(x,y2,c=[0.5,0.5,0.5]) #Use a grey line\nplt.xlabel('x') #Label the axis\nplt.ylabel('y')\n#save the image to a file\nplt.savefig('my_first.pdf',bbox_inches='tight')\n</pre> #my_first_file.py import numpy as np import matplotlib.pyplot as plt # Create some vectors x = np.arange(1,10,0.1) y1 = np.exp(0.5*x) y2 = np.exp(0.6*x) #plot the vectors plt.plot(x,y1,'k') #Use a black line plt.plot(x,y2,c=[0.5,0.5,0.5]) #Use a grey line plt.xlabel('x') #Label the axis plt.ylabel('y') #save the image to a file plt.savefig('my_first.pdf',bbox_inches='tight') <p>The problem with this script is that changing the arguments in the exponential functions requires editing the script and then re-running the code. It would be more convenient to designate a variable change from the command window and have the code automatically update its output. The problem is that a script cannot return a variable or accept a variable as input. To do so requires a \"function\". Functions are program \u2002les that can be called from the Command window, can accept inputs, and return outputs. To start one, open a new\u2002file and type:</p> In\u00a0[3]: Copied! <pre>def logGrowth(N,t):\n    \"\"\"\n    function dNdt = logGrowth(N,t)\n    logGrowth gives the growth rate of a population of size N at time t\n    usage: dNdt = logGrowth(N,t)\n    \"\"\"\n    r = 0.5\n    K = 100\n    dNdt = r*N*(1-N/K)\n    return dNdt\n</pre> def logGrowth(N,t):     \"\"\"     function dNdt = logGrowth(N,t)     logGrowth gives the growth rate of a population of size N at time t     usage: dNdt = logGrowth(N,t)     \"\"\"     r = 0.5     K = 100     dNdt = r*N*(1-N/K)     return dNdt <p>Now the new function can be accessed just like one of Python's built-in functions, for example, type the following code into a new \u2002le named \\Lab1_Functions\". Note that to use code from another \u2002le, import the \u2002le</p> In\u00a0[6]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\nvN = np.arange(0,110)\nplt.plot(vN,logGrowth(vN,0))\nplt.xlabel('N')\nplt.ylabel('dN/dt')\n</pre>  import numpy as np import matplotlib.pyplot as plt  vN = np.arange(0,110) plt.plot(vN,logGrowth(vN,0)) plt.xlabel('N') plt.ylabel('dN/dt') Out[6]: <pre>Text(0, 0.5, 'dN/dt')</pre> <p>This gives an upside down parabola, denoting that growth rate is positive between 0 and 100 and negative when N is greater than 100. Note that the argument t is not used in the logGrowth function. Not all inputs have to be used. We will update this function later to both accept and utilize all inputs.</p> <p>You may decide to use Python to numerically solve di\u2002erential equations, like the logistic growth equation, even when such solutions are not available analytically. But, in many cases, such solutions are not available analytically, and hence we must use such techniques to help build intuition. The most-used Python program which does the integration is called integrate.odeint from the scipy package. Here is a script that integrates the logGrowth function.</p> In\u00a0[7]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import integrate\n#Numerical solution of the logisitic equation\nt0 = 0 # Initial time\ntf = 50 # Final time\nN0 = 1 # Initial population size\nT = np.linspace(t0,tf) # time steps to report\nvNint = integrate.odeint(logGrowth,N0,T)\n# Actual solution\nr = 0.5\nK = 100\nvNact = (N0*np.exp(r*T))/(1+N0*(np.exp(r*T)-1)/K) # Actual solution\n# Plot results\nplt.plot(T,vNint) # Plot numerically integrated solution\nplt.scatter(T,vNact,color='red') # Plot actual solution\nplt.xlabel('Time')\nplt.ylabel('Population size')\nplt.title('Logisitic model')\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy import integrate #Numerical solution of the logisitic equation t0 = 0 # Initial time tf = 50 # Final time N0 = 1 # Initial population size T = np.linspace(t0,tf) # time steps to report vNint = integrate.odeint(logGrowth,N0,T) # Actual solution r = 0.5 K = 100 vNact = (N0*np.exp(r*T))/(1+N0*(np.exp(r*T)-1)/K) # Actual solution # Plot results plt.plot(T,vNint) # Plot numerically integrated solution plt.scatter(T,vNact,color='red') # Plot actual solution plt.xlabel('Time') plt.ylabel('Population size') plt.title('Logisitic model') Out[7]: <pre>Text(0.5, 1.0, 'Logisitic model')</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"day1_eco_evo_principles/python_notebook_day1/#python-lectures","title":"Python - Lectures\u00b6","text":""},{"location":"day1_eco_evo_principles/python_notebook_day1/#day-1-june-23-2025","title":"Day 1 (June 23, 2025)\u00b6","text":""},{"location":"day1_eco_evo_principles/python_notebook_day1/#building-programs-from-scripts-and-functions","title":"Building \"Programs\" from \"Scripts\" and \"Functions\"\u00b6","text":""},{"location":"day1_eco_evo_principles/python_notebook_day1/#numerically-integrating-differential-equations","title":"Numerically Integrating Differential Equations\u00b6","text":""}]}