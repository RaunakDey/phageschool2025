{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"day1_eco_evo_principles/python_notebook_day1/","title":"Phage School","text":"<p>If you need installation help you can read the documentation here or ask one of the TAs.</p> <p>Once you have a lot of commands, it will get exhausting typing them again and again (especially when you make mistakes). Instead, you will want to use a \\script\". A script is a list of commands in a \u2002le that you can execute directly from the command window. To create a script go to the File menu and select New &gt; File. Now type in a few commands, such as:</p> In\u00a0[1]: Copied! <pre>#my_first_file.py\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Create some vectors\nx = np.arange(1,10,0.1)\ny1 = np.exp(0.5*x)\ny2 = np.exp(0.6*x)\n#plot the vectors\nplt.plot(x,y1,'k') #Use a black line\nplt.plot(x,y2,c=[0.5,0.5,0.5]) #Use a grey line\nplt.xlabel('x') #Label the axis\nplt.ylabel('y')\n#save the image to a file\nplt.savefig('my_first.pdf',bbox_inches='tight')\n</pre> #my_first_file.py import numpy as np import matplotlib.pyplot as plt # Create some vectors x = np.arange(1,10,0.1) y1 = np.exp(0.5*x) y2 = np.exp(0.6*x) #plot the vectors plt.plot(x,y1,'k') #Use a black line plt.plot(x,y2,c=[0.5,0.5,0.5]) #Use a grey line plt.xlabel('x') #Label the axis plt.ylabel('y') #save the image to a file plt.savefig('my_first.pdf',bbox_inches='tight') <p>The problem with this script is that changing the arguments in the exponential functions requires editing the script and then re-running the code. It would be more convenient to designate a variable change from the command window and have the code automatically update its output. The problem is that a script cannot return a variable or accept a variable as input. To do so requires a \"function\". Functions are program \u2002les that can be called from the Command window, can accept inputs, and return outputs. To start one, open a new\u2002file and type:</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"day1_eco_evo_principles/python_notebook_day1/#phage-school","title":"Phage School\u00b6","text":""},{"location":"day1_eco_evo_principles/python_notebook_day1/#prof-joshua-weitz-dr-marian-dominguez-mirazo","title":"Prof. Joshua Weitz, Dr. Marian Dominguez-Mirazo\u00b6","text":""},{"location":"day1_eco_evo_principles/python_notebook_day1/#day-1-june-23-2025-eco-evo-dynamics","title":"Day 1 (June 23, 2025), Eco Evo Dynamics\u00b6","text":""},{"location":"day1_eco_evo_principles/python_notebook_day1/#building-programs-from-scripts-and-functions","title":"Building \"Programs\" from \"Scripts\" and \"Functions\"\u00b6","text":""}]}